@testset "array" begin
    @testset for (interface_only, f, x...) in [
        (false, adjoint, randn(5)),
        (false, adjoint, randn(5, 4)),
        (false, *, randn(), randn(2)),
        (false, *, randn(), randn(1, 2)),
        (false, *, randn(), randn(2, 2, 1)),
        (false, *, randn(2), randn()),
        (false, *, randn(2, 1), randn()),
        (false, *, randn(2, 1, 2), randn()),
        (false, +, randn(2), randn(2)),
        (false, +, randn(2), randn(2), randn(2), randn(2)),
        (false, -, randn(1, 2), randn(1, 2)),
        (false, -, randn(1, 2)),
        (false, /, randn(1, 2), randn()),
        # (false, //, [1, 2], 5),
        (false, ==, randn(1, 2), randn(2, 1)),
        (false, Array, randn(1, 2)),
        # (false, CartesianIndices, [1, 2, 3]),
        (false, IndexStyle, randn(1, 2)),
        (false, IndexStyle, randn(2, 1), randn(1, 2)),
        (false, \, randn(), randn(2, 2)),
        (false, \, randn(2), randn(2, 2)),
        (false, x -> all(>(0), x), randn(2)),
        (false, allunique, randn(2)),
        (false, x -> any(<(0), x), randn(2)),
        (false, argmax, randn(2)),
        (false, argmin, randn(2)),
        (false, axes, randn(2, 1, 1, 2)),
        (false, circshift, randn(3), 1),
        (false, circshift!, randn(3), randn(3), 1),
        (false, clamp!, randn(3), 0.0, 0.5),
        (false, collect, randn(3)),
        (false, complex, randn(StableRNG(1), 2)),
        (false, conj, randn(3)),
        (false, copy!, randn(2), randn(2)),
        (false, copyto!, randn(3), CartesianIndices(2:3), randn(2), CartesianIndices(1:2)),
        (false, copyto!, randn(3), 2, randn(2), 1, 2),
        (false, copyto!, randn(ComplexF64, 3), 2, randn(2), 1, 2),
        (false, copyto!, randn(3), randn(3)),
        (false, copyto!, randn(ComplexF64, 1, 3), randn(1, 3)),
        (false, cumprod, randn(3)),
        (false, (B, A) -> cumprod!(B, A; dims=2), randn(2, 2), randn(2, 2)),
        (false, cumsum, randn(3)),
        (false, (out, v) -> cumsum!(out, v; dims=1), randn(3), randn(3)),
        (false, (out, v) -> cumsum!(out, v; dims=2), randn(2, 3), randn(2, 3)),
        (false, diff, randn(5)),
        (false, x -> diff(x; dims=1), randn(3, 2)),
        (false, x -> diff(x; dims=2), randn(3, 2)),
        (false, extrema, randn(3)),
        (false, x -> extrema(sin, x), randn(3)),
        (false, x -> extrema(sin, x; dims=1), randn(3, 2)),
        (false, (r, A) -> extrema!(cos, r, A), tuple.(randn(3), randn(3)), randn(3, 2)),
        (false, (r, A) -> extrema!(r, A), tuple.(randn(3), randn(3)), randn(3, 2)),
        (false, fill!, randn(3), randn()),
        (false, fill!, randn(3, 2), randn()),
        (false, x -> filter(>(0), x), [0.5, -0.1, -0.4]),
        (false, x -> filter(<(0), x), randn(StableRNG(1), 2, 2)),
        # (false, x -> findall(<(0), x), [0.5, 0.0, -0.3]), # uses invoke, which is not currently supported
        (false, x -> findfirst(<(0), x), [0.5, -0.1, -0.4]),
        (false, x -> findlast(<(0), x), [0.5, -0.1, -0.4]),
        # (false, findmax, randn(2, 2)), # diff issues
        (false, x -> findmax(sin, x), [0.5, -0.1, -0.4]),
        (false, x -> findmax(sin, x), [0.5, -0.1, -0.4]),
        # (false, findmin, randn(2, 2)), # diff issues
        # (false, x -> findmin(cos, x), randn(2, 2)), # diff issues
        (false, first, randn(3)),
        # (false, firstindex, randn(3)), # diff issues
        (false, float, randn(3)),
    ]
        rng = StableRNG(123456)
        test_taped_rrule!!(rng, f, deepcopy(x)...; interface_only, perf_flag=:none)
    end
end
