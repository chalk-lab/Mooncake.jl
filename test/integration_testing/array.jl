@testset "array" begin
    @testset for (interface_only, f, x...) in [
        (false, adjoint, randn(5)),
        (false, adjoint, randn(5, 4)),
        (false, *, 2.1, randn(2)),
        (false, *, -2.01, randn(1, 2)),
        (false, *, -0.5, randn(2, 2, 1)),
        (false, *, randn(2), 0.32),
        (false, *, randn(2, 1), 0.33),
        (false, *, randn(2, 1, 2), -0.34),
        (false, +, randn(2), randn(2)),
        (false, +, randn(2), randn(2), randn(2), randn(2)),
        (false, -, randn(1, 2), randn(1, 2)),
        (false, -, randn(1, 2)),
        (false, /, randn(1, 2), 0.66),
        (false, //, [1, 2], 5),
        (false, ==, randn(1, 2), randn(2, 1)),
        (false, Array, randn(1, 2)),
        (false, CartesianIndices, [1, 2, 3]),
        (false, IndexStyle, randn(1, 2)),
        (false, IndexStyle, randn(2, 1), randn(1, 2)),
        (false, \, 0.67, randn(2, 2)),
        (false, \, randn(2), randn(2, 2)),
        (false, x -> all(>(0), x), randn(2)),
        (false, allunique, randn(2)),
        (false, x -> any(<(0), x), randn(2)),
        (false, argmax, randn(2)),
        (false, argmin, randn(2)),
        (false, axes, randn(2, 1, 1, 2)),
        (false, circshift, randn(3), 1),
        (false, circshift!, randn(3), randn(3), 1),
        (false, clamp!, randn(3), 0.0, 0.5),
        (false, collect, randn(3)),
        (false, complex, randn(StableRNG(1), 2)),
        (false, conj, randn(3)),
        (false, copy!, randn(2), randn(2)),
        (false, copyto!, randn(3), CartesianIndices(2:3), randn(2), CartesianIndices(1:2)),
        (false, copyto!, randn(3), 2, randn(2), 1, 2),
        (
            false,
            copyto!,
            randn(StableRNG(1), ComplexF64, 3),
            2,
            randn(StableRNG(12), 2),
            1,
            2,
        ),
        (false, copyto!, randn(3), randn(3)),
        (false, copyto!, randn(StableRNG(4), ComplexF64, 1, 3), randn(1, 3)),
        (false, cumprod, randn(3)),
        (false, (B, A) -> cumprod!(B, A; dims=2), randn(2, 2), randn(2, 2)),
        (false, cumsum, randn(3)),
        (false, (out, v) -> cumsum!(out, v; dims=1), randn(3), randn(3)),
        (false, (out, v) -> cumsum!(out, v; dims=2), randn(2, 3), randn(2, 3)),
        (false, diff, randn(5)),
        (false, x -> diff(x; dims=1), randn(3, 2)),
        (false, x -> diff(x; dims=2), randn(3, 2)),
        (false, extrema, randn(3)),
        (false, x -> extrema(sin, x), randn(3)),
        (false, x -> extrema(sin, x; dims=1), randn(3, 2)),
        (false, (r, A) -> extrema!(cos, r, A), tuple.(randn(3), randn(3)), randn(3, 2)),
        (false, (r, A) -> extrema!(r, A), tuple.(randn(3), randn(3)), randn(3, 2)),
        (false, fill!, randn(3), randn()),
        (false, fill!, randn(3, 2), randn()),
        (false, x -> filter(>(0), x), [0.5, -0.1, -0.4]),
        (false, x -> filter(<(0), x), randn(StableRNG(1), 2, 2)),
        # (false, x -> findall(<(0), x), [0.5, 0.0, -0.3]), # uses invoke, which is not currently supported
        (false, x -> findfirst(<(0), x), [0.5, -0.1, -0.4]),
        (false, x -> findlast(<(0), x), [0.5, -0.1, -0.4]),
        (false, findmax, randn(2, 2)),
        (false, x -> findmax(sin, x), [0.5, -0.1, -0.4]),
        (false, x -> findmax(sin, x), [0.5, -0.1, -0.4]),
        (false, findmin, randn(2, 2)),
        (false, x -> findmin(cos, x), randn(2, 2)),
        (false, first, randn(3)),
        (false, firstindex, randn(3)),
        (false, float, randn(3)),
        (false, (x, i) -> get(() -> 5.0, x, i), randn(3), 2),
        (false, (x, i) -> get(() -> 5.0, x, i), randn(3), 4),
        (false, getindex, randn(5), 1),
        (false, getindex, randn(5), 3),
        (false, getindex, randn(5, 4), 3),
        (false, getindex, randn(5, 4), 2, 3),
        (false, getindex, randn(5), 1:2),
        (false, getindex, randn(5), 2:4),
        (false, getindex, randn(5), :),
        (false, getindex, randn(3, 2), :),
        (false, getindex, randn(5), 1:2:5),
        (false, getindex, randn(5), [1, 3, 5]),
        (false, hash, randn(3, 4), UInt(2)),
        (false, hcat, randn(3, 2)),
        (false, hcat, randn(2, 3), randn(2, 2)),
        (false, imag, randn(2, 3)),
        (false, imag, randn(ComplexF64, 2, 3)),
        (false, isassigned, randn(5), 3),
        (false, isassigned, randn(5), CartesianIndex(4)),
        (false, isempty, randn(5)),
        (false, isempty, randn(0)),
        (false, isequal, randn(3), randn(3)),
        (false, isreal, randn(3)),
        (false, isreal, randn(ComplexF64, 3)),
        (false, iszero, randn(2)),
        (false, iterate, randn(2)),
        (false, iterate, randn(2, 2)),
        (false, keys, randn(2)),
        (false, keytype, randn(2)),
        (false, lastindex, randn(2)),
        (false, length, randn(2)),
        (false, length, randn(2, 3)),
        (false, map, sin, randn(2)),
        (false, map!, sin, randn(2), randn(2)),
        (false, map!, *, randn(2), randn(2), randn(2)),
        (false, mapreduce, sin, *, randn(2)),
        (false, (f, x) -> mapslices(f, x; dims=1), sum, randn(2, 3)),
        (false, maximum, randn(2)),
        (false, maximum, randn(2, 3)),
        (false, maximum, sin, randn(2)),
        (false, maximum, cos, randn(2, 3)),
        (false, x -> maximum(cos, x; dims=2), randn(3, 2)),
        (false, maximum!, sin, randn(2), randn(2, 3)),
        (false, minimum, randn(2)),
        (false, minimum, randn(2, 3)),
        (false, minimum, sin, randn(2)),
        (false, minimum, cos, randn(2, 3)),
        (false, x -> minimum(cos, x; dims=2), randn(3, 2)),
        (false, minimum!, sin, randn(2), randn(2, 3)),
        (false, muladd, randn(2, 2), randn(2), randn(2)),
        (false, muladd, randn(2, 2), randn(2), randn()),
        (false, ndims, randn(2)),
        (false, ndims, randn(1, 2, 1, 1, 1)),
        (false, nextind, randn(3, 3), 2),
        (false, nextind, randn(3, 3), CartesianIndex(2, 2)),
        (false, pairs, randn(2, 2)),
        (false, parent, randn(3, 2)),
        (false, parentindices, randn(3, 2)),
        (false, permutedims, randn(3, 2, 1), [2, 1, 3]),
        (false, permutedims, randn(2)),
        (false, permutedims, randn(2, 3)),
        (false, permutedims!, randn(2, 3, 1), randn(3, 2, 1), [2, 1, 3]),
        (false, prevind, randn(2, 3), 5),
        (false, prevind, randn(2, 3), CartesianIndex(2, 2)),
        (false, prod, randn(2)),
        (false, prod, randn(2, 3)),
        (false, x -> prod(x; dims=1), randn(2, 3)),
        (false, x -> prod(sin, x; dims=2), randn(2, 2)),
        (false, prod!, sin, randn(2), randn(2, 3)),
        (false, prod!, randn(2), randn(2, 3)),
        (false, promote_shape, randn(2), randn(2)),
        (false, promote_shape, randn(2), randn(2, 1, 1)),
        (false, real, randn(3, 2, 1)),
        (false, reduce, *, randn(2)),
        (false, reduce, *, randn(3, 2)),
        (false, repeat, randn(2), 2, 3),
        (false, (x, i, o) -> repeat(x; inner=i, outer=o), randn(2), 2, 3),
        (false, reshape, randn(3, 2), 2, 3),
        (false, reshape, randn(3, 2), :, 3),
        (false, reshape, randn(3, 2), (6,)),
        (false, reverse, randn(3)),
        (false, reverse!, randn(3)),
        (false, selectdim, randn(3), 1, 2),
        (false, setindex!, randn(3), randn(), 1),
        (false, setindex!, randn(3), randn(2), 1:2),
        (false, setindex!, randn(3), randn(), CartesianIndex(2)),
        (false, setindex!, randn(3, 2), randn(), 5),
        (false, setindex!, randn(3, 2), randn(), 2, 2),
        (false, setindex!, randn(3, 2), randn(), CartesianIndex(2, 1)),
        (false, setindex!, randn(3, 2), randn(2, 2), 2:3, 1:2),
        (false, setindex!, randn(3, 2), randn(2, 2), 1:2, :),
        (false, setindex!, randn(3, 2), randn(), CartesianIndex(2), 1),
        (true, similar, randn(3, 2)),
        (false, size, randn(2)),
        (false, size, randn(3, 2)),
        (false, size, randn(3, 2, 1)),
        (false, sizeof, randn(5)),
        (false, sort, randn(3)),
        (false, sort!, randn(3)),
        # (false, sortperm, randn(3)), # unclear why not working
        # (false, sortperm!, [1, 2, 3], randn(3)), # unclear why not working
        # (false, x -> sortslices(x; dims=1), randn(2, 3)), # unclear why not working
        (false, stride, randn(3, 2), 1),
        (false, sum, randn(2, 3)),
        (false, x -> sum(x; dims=1), randn(3, 2)),
        (false, (f, x) -> sum(f, x; dims=2), sin, randn(3, 2)),
        (false, sum!, randn(1, 3), randn(2, 3)),
        (false, sum!, sin, randn(1, 3), randn(2, 3)),
        (false, transpose, randn(3, 2)),
        (false, transpose, randn(1, 3)),
        # (false, unique, randn(3)), # hits invoke, which is not currently supported
        (false, valtype, randn(3)),
        (false, vcat, randn(2)),
        (false, vcat, randn(2, 2)),
        (false, vcat, randn(3), randn(2)),
        (false, vcat, randn(3, 2), randn(2, 2)),
        (false, vec, randn(2)),
        (false, vec, randn(2, 3)),
        (false, view, randn(2, 3), 1:2, 1:2),
        (false, view, randn(3, 2), 1:3),
        (false, view, randn(3, 2), :, 1),
        (false, view, randn(3, 2), :, :),
        (false, zero, randn(3)),
        (false, zero, randn(2, 3)),
    ]
        rng = StableRNG(123456)
        test_taped_rrule!!(rng, f, deepcopy(x)...; interface_only, perf_flag=:none)
    end
end
