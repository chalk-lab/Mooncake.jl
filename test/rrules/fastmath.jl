@testset "fastmath" begin
    interp = Tapir.TapirInterpreter()
    @testset "$(typeof((f, x...)))" for (perf_flag, f, x...) in Any[
        (:allocs, Base.FastMath.abs2_fast, -5.0),
        (:allocs, Base.FastMath.abs_fast, 5.0),
        (:allocs, Base.FastMath.acos_fast, 0.5),
        (:allocs, Base.FastMath.acosh_fast, 1.2),
        (:allocs, Base.FastMath.add_fast, 1.0, 2.0),
        (:allocs, Base.FastMath.angle_fast, 0.5),
        (:allocs, Base.FastMath.asin_fast, 0.5),
        (:allocs, Base.FastMath.asinh_fast, 1.3),
        (:allocs, Base.FastMath.atan_fast, 5.4),
        (:allocs, Base.FastMath.atanh_fast, 0.5),
        (:allocs, Base.FastMath.cbrt_fast, 0.4),
        (:allocs, Base.FastMath.cis_fast, 0.5),
        (:allocs, Base.FastMath.cmp_fast, 0.5, 0.4),
        (:allocs, Base.FastMath.conj_fast, 0.4),
        (:allocs, Base.FastMath.conj_fast, ComplexF64(0.5, 0.4)),
        (:allocs, Base.FastMath.cos_fast, 0.4),
        (:allocs, Base.FastMath.cosh_fast, 0.3),
        (:allocs, Base.FastMath.div_fast, 5.0, 1.1),
        (:allocs, Base.FastMath.eq_fast, 5.5, 5.5),
        (:allocs, Base.FastMath.eq_fast, 5.5, 5.4),
        (:allocs, Base.FastMath.exp10_fast, 0.5),
        (:allocs, Base.FastMath.exp2_fast, 0.5),
        (:allocs, Base.FastMath.exp_fast, 5.0),
        (:allocs, Base.FastMath.expm1_fast, 5.4),
        (:allocs, Base.FastMath.ge_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.ge_fast, 4.0, 5.0),
        (:allocs, Base.FastMath.gt_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.gt_fast, 4.0, 5.0),
        (:allocs, Base.FastMath.hypot_fast, 5.1, 3.2),
        (:allocs, Base.FastMath.inv_fast, 0.5),
        (:allocs, Base.FastMath.isfinite_fast, 5.0),
        (:allocs, Base.FastMath.isinf_fast, 5.0),
        (:allocs, Base.FastMath.isnan_fast, 5.0),
        (:allocs, Base.FastMath.issubnormal_fast, 0.3),
        (:allocs, Base.FastMath.le_fast, 0.5),
        (:allocs, Base.FastMath.log10_fast, 0.5),
        (:allocs, Base.FastMath.log1p_fast, 0.5),
        (:allocs, Base.FastMath.log2_fast, 0.5),
        (:allocs, Base.FastMath.log_fast, 0.5),
        (:allocs, Base.FastMath.lt_fast, 0.5, 4.0),
        (:allocs, Base.FastMath.lt_fast, 5.0, 0.4),
        (:allocs, Base.FastMath.max_fast, 5.0, 4.0),
        (:none, Base.FastMath.maximum!_fast, sin, [0.0, 0.0], [5.0 4.0; 3.0 2.0]),
        (:allocs, Base.FastMath.maximum_fast, [5.0, 4.0, 3.0]),
        (:allocs, Base.FastMath.min_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.min_fast, 4.0, 5.0),
        (:none, Base.FastMath.minimum!_fast, sin, [0.0, 0.0], [5.0 4.0; 3.0 2.0]),
        (:allocs, Base.FastMath.minimum_fast, [5.0, 3.0, 4.0]),
        (:allocs, Base.FastMath.minmax_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.mul_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.ne_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.pow_fast, 5.0, 2.0),
        # (:allocs, Base.FastMath.pow_fast, 5.0, 2), # errors -- ADD A RULE FOR ME!
        # (:allocs, Base.FastMath.rem_fast, 5.0, 2.0), # error -- ADD A RULE FOR ME! 
        (:allocs, Base.FastMath.sign_fast, 5.0),
        (:allocs, Base.FastMath.sign_fast, -5.0),
        (:allocs, Base.FastMath.sin_fast, 5.0),
        (:allocs, Base.FastMath.cos_fast, 4.0),
        (:allocs, Base.FastMath.sincos_fast, 4.0),
        (:allocs, Base.FastMath.sinh_fast, 5.0),
        (:allocs, Base.FastMath.sqrt_fast, 5.0),
        (:allocs, Base.FastMath.sub_fast, 5.0, 4.0),
        (:allocs, Base.FastMath.tan_fast, 4.0),
        (:allocs, Base.FastMath.tanh_fast, 0.5),
    ]
        TestUtils.test_derived_rule(
            sr(123456), f, x...; perf_flag, interface_only=false, is_primitive=false, interp
        )
    end
end
