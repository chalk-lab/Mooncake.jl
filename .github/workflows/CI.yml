name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  tests:
    name: test-${{ matrix.test_group }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_group:
          # - 'basic'
          # - 'integration_testing/misc'
          # - 'integration_testing/diff_tests'
          # - 'integration_testing/distributions'
          - 'integration_testing/special_functions'
          - 'foo'
          # - 'integration_testing/array'
          # - 'integration_testing/turing'
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v1
        with:
          version: 1.9
          arch: x64
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
      - name: Set start time
        id: start-time
        run: echo "start_time=$(date +%s)" >> "$GITHUB_ENV"
      # - uses: julia-actions/julia-runtest@v1
      #   env:
      #     TEST_GROUP: ${{ matrix.test_group }}
      - name: Set end time
        id: end-time
        run: echo "end_time=$(date +%s)" >> "$GITHUB_ENV"
      - name: Calculate elapsed time
        id: elapsed-time
        run: echo "elapsed_time=$((end_time - start_time))" >> "$GITHUB_ENV"
      - name: Log elapsed time
        run: echo "Job took $elapsed_time seconds"
      # - name: Log Results
      #   run: |
      #     using Pkg
      #     Pkg.activate(; temp=true)
      #     Pkg.add(["DataFrames", "PythonCall", "Plots", "Wandb"])
      #   shell: julia --color=yes {0}
  perf:
    name: "Performance Analysis"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - run: echo "Job took $elapsed_time seconds"
      - name: Visualise Results
        run: |
          using Pkg
          Pkg.activate(; temp=true)
          Pkg.add(["DataFrames", "PythonCall", "Plots", "Wandb"])
          using Plots
          # using DataFrames, PythonCall, Plots, Wandb
          # api = Wandb.wandb.Api()
          # run = api.run("willtebbutt/my-awesome-project/extensible-run-id")
          # df = DataFrame(map(x -> pyconvert(Dict, x), run.history()))
          savefig(plot(randn(10)), "foo.png")
        env:
          WANDB_API_KEY: ${{secrets.WANDB_TOKEN}}
        shell: julia --color=yes {0}
      - name: Archive performance graph
        uses: actions/upload-artifact@v3
        with:
          name: perf-data
          path: output/foo.png
